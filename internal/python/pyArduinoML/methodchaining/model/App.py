__author__ = 'pascalpoizat'

from model.NamedElement import NamedElement


class App(NamedElement):
    """
    Application built over bricks.

    """

    def __init__(self, name, bricks=(), states=(), used_remote=False, used_beep=False):
        """
        Constructor.

        :param name: String, the name of the application
        :param bricks: List[Brick], bricks over which the application operates
        :param states: List[State], states of the application with the first one being the initial state
        :return:
        """
        NamedElement.__init__(self, name)
        self.bricks = bricks
        self.states = states
        self.used_remote = used_remote
        self.used_beep = used_beep
        if self.used_remote:
            for state in self.states:
                state.remote_used = True        

    def __repr__(self):
        """
        External representation: Arduino program

        :return: String
        """

        rtr = """// generated by ArduinoML

%s

void setup() {
%s
}

int state = LOW; int prev = HIGH;
long time = 0; long debounce = 200;

%s
void loop() { state_%s(); }""" % ("\n".join(map(lambda b: b.declare(), self.bricks))+"%s%s" % ("\nchar incomingByte;" if self.used_remote else "", "\nint first = 1;" if self.used_beep else ""),
                                  "\n".join(map(lambda b: b.setup(), self.bricks))+"%s" % ("\n\tSerial.begin(9600);" if self.used_remote else ""),
                                  "\n".join(map(lambda s: s.setup(), self.states)),
                                  self.states[0].name)
        return rtr
